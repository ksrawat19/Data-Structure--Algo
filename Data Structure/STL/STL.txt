================ S T L Overview ================

- **Containers**: Data structures to store collections of objects.
- **Iterators**: Objects used to traverse elements in a container.
- **Algorithms**: Functions to perform operations on elements in containers.
- **Function Objects (Functors)**: Objects that can be used as though they are functions.
- **Utilities**: Common utility classes and functions.

### **Containers:**

#### **Sequence Containers:**
- **`vector`**: Dynamic array.
- **`list`**: Doubly linked list.
- **`deque`**: Double-ended queue.

#### **Associative Containers:**
- **`set`**: Unique, ordered keys.
- **`map`**: Key-value pairs, ordered by keys.

#### **Unordered Associative Containers:**
- **`unordered_set`**: Unique, unordered keys.
- **`unordered_map`**: Key-value pairs, unordered.

#### **Container Adapters:**
- **`stack`**: LIFO (Last In First Out).
- **`queue`**: FIFO (First In First Out).
- **`priority_queue`** Elements are ordered by priority.

### **Iterators:**

- **Random Access**: `vector`, `deque`.
- **Bidirectional**: `list`, `set`, `map`.
- **Forward**: `forward_list`.
- **Input/Output**: Streams.

### **Algorithms:**

- **Sorting**: `sort`, `stable_sort`.
- **Searching**: `find`, `binary_search`.
- **Modifying**: `transform`, `remove_if`.

### **Function Objects (Functors):**

- Objects that act like functions.
- Example: `struct Square { void operator()(int& x) { x = x * x; } };`

### **Utilities:**

- **`pair`**: Combines two values.
- **`tuple`**: Combines multiple values.

### **Smart Pointers:**

- **`unique_ptr`**: Single ownership.
- **`shared_ptr`**: Multiple ownership.

### **Important Points:**

- **Containers** hold collections.
- **Iterators** traverse containers.
- **Algorithms** perform operations.
- **Functors** customize operations.
- **Utilities** provide common functionality.
- **Smart pointers** manage dynamic memory.

Feel free to reach out if you need more details or have any questions! ðŸ˜Š Happy studying! ðŸ“šâœ¨

================ S T L in D E E P ================

S T L 
C++ Standard Template Library (STL).

## **1. Containers**

### **Sequence Containers**

1. **`std::vector`**
   - **Memory Layout:** Contiguous.
   - **Dynamic Size:** Can grow or shrink dynamically.
   - **Operations:**
     - `push_back()`, `pop_back()`
     - `insert()`, `erase()`
     - `resize()`, `reserve()`
   - **Access:** Random access with `[]` and `at()`.

2. **`std::deque`**
   - **Memory Layout:** Multiple contiguous blocks.
   - **Double-Ended:** Insertions and deletions at both ends are efficient.
   - **Operations:**
     - `push_back()`, `push_front()`
     - `pop_back()`, `pop_front()`

3. **`std::list`**
   - **Memory Layout:** Doubly linked list.
   - **Efficient Insertions/Deletions:** Anywhere in the list.
   - **Bidirectional Iteration:** Supports forward and backward traversal.
   - **Operations:**
     - `push_back()`, `push_front()`
     - `insert()`, `erase()`

4. **`std::forward_list`**
   - **Memory Layout:** Singly linked list.
   - **Efficient Insertions/Deletions:** At the beginning.
   - **Forward Iteration Only:** No backward traversal.
   - **Operations:**
     - `push_front()`
     - `insert_after()`, `erase_after()`

5. **`std::array` (C++11)**
   - **Memory Layout:** Contiguous.
   - **Fixed Size:** Size defined at compile time.
   - **Operations:**
     - `fill()`, `swap()`

ALSO **`stack**, **`queue**
**`priorityQueue(in queue Library)
##priority_queue provides efficient access to the highest-priority element.
Default is max-heap, but can be customized to a min-heap or other priorities with a comparator.

### **Associative Containers**

1. **`std::set`**
   - **Structure:** Balanced binary search tree.
   - **Sorted:** Elements are stored in sorted order.
   - **Unique Elements:** No duplicates.
   - **Operations:**
     - `insert()`, `erase()`
     - `find()`, `count()`

2. **`std::multiset`**
   - **Structure:** Balanced binary search tree.
   - **Sorted:** Elements are stored in sorted order.
   - **Duplicate Elements:** Allowed.
   - **Operations:**
     - `insert()`, `erase()`
     - `find()`, `count()`

3. **`std::map`**
   - **Structure:** Balanced binary search tree.
   - **Sorted:** Elements are stored as key-value pairs in sorted order.
   - **Unique Keys:** No duplicate keys.
   - **Operations:**
     - `insert()`, `erase()`
     - `find()`, `count()`
     - `operator[]`

4. **`std::multimap`**
   - **Structure:** Balanced binary search tree.
   - **Sorted:** Elements are stored as key-value pairs in sorted order.
   - **Duplicate Keys:** Allowed.
   - **Operations:**
     - `insert()`, `erase()`
     - `find()`, `count()`

### **Unordered Associative Containers**

1. **`std::unordered_set`**
   - **Structure:** Hash table.
   - **Unsorted:** Elements are not stored in any particular order.
   - **Unique Elements:** No duplicates.
   - **Operations:**
     - `insert()`, `erase()`
     - `find()`, `count()`

2. **`std::unordered_multiset`**
   - **Structure:** Hash table.
   - **Unsorted:** Elements are not stored in any particular order.
   - **Duplicate Elements:** Allowed.
   - **Operations:**
     - `insert()`, `erase()`
     - `find()`, `count()`

3. **`std::unordered_map`**
   - **Structure:** Hash table.
   - **Unsorted:** Elements are stored as key-value pairs without any particular order.
   - **Unique Keys:** No duplicate keys.
   - **Operations:**
     - `insert()`, `erase()`
     - `find()`, `count()`
     - `operator[]`

4. **`std::unordered_multimap`**
   - **Structure:** Hash table.
   - **Unsorted:** Elements are stored as key-value pairs without any particular order.
   - **Duplicate Keys:** Allowed.
   - **Operations:**
     - `insert()`, `erase()`
     - `find()`, `count()`

## **2. Iterators**

### **Iterator Types**

1. **Input Iterators:**
   - Read elements sequentially.
   - Operations: `*`, `++`.

2. **Output Iterators:**
   - Write elements sequentially.
   - Operations: `*`, `++`.

3. **Forward Iterators:**
   - Read and write elements sequentially.
   - Operations: `*`, `++`.

4. **Bidirectional Iterators:**
   - Read and write elements sequentially in both directions.
   - Operations: `*`, `++`, `--`.

5. **Random Access Iterators:**
   - Direct access to any element.
   - Operations: `*`, `++`, `--`, `+`, `-`, `[]`.

## **3. Algorithms**

### **Common Algorithms**

1. **Sorting:**
   - `std::sort(begin, end)`: Sorts elements in a range.
   - `std::partial_sort(begin, middle, end)`: Partially sorts elements.

2. **Searching:**
   - `std::find(begin, end, value)`: Finds the first element equal to `value`.
   - `std::binary_search(begin, end, value)`: Checks if `value` is present in a sorted range.

3. **Modifying:**
   - `std::copy(begin, end, dest)`: Copies elements to another range.
   - `std::fill(begin, end, value)`: Assigns `value` to all elements in a range.

4. **Partitioning:**
   - `std::partition(begin, end, pred)`: Partitions elements based on a predicate.

### **Usage of Functors and Lambdas**

- **Functors:** Custom comparison or operation logic

### **Useful STL Features**

- **`std::pair` and `std::tuple`:** Store pairs or tuples of values.
  ```cpp
  std::pair<int, std::string> p = std::make_pair(1, "One");
  std::tuple<int, std::string, float> t = std::make_tuple(1, "One", 1.0f);
  ```

- **`std::unique_ptr` and `std::shared_ptr`:** Manage dynamic memory.
  ```cpp
  std::unique_ptr<int> ptr1 = std::make_unique<int>(10);
  std::shared_ptr<int> ptr2 = std::make_shared<int>(20);
  ```

### **Summary**

The C++ STL provides a rich set of tools for efficient and flexible data management. By understanding containers, iterators, algorithms, and the use of functors and lambdas, you can harness the full power of STL to write clean, efficient, and robust code.


================ S T L opertations ================

Various operations you can perform on different types of containers in the Standard Template Library (STL) in C++:

## **1. Vector (`std::vector`)**

### **Common Operations:**
- **Access Elements:**
  - `operator[]` - Access element by index.
  - `at()` - Access element with bounds checking.
  - `front()` - Access the first element.
  - `back()` - Access the last element.
  
- **Modifiers:**
  - `push_back()` - Add an element at the end.
  - `pop_back()` - Remove the last element.
  - `insert()` - Insert elements at a specified position.
  - `erase()` - Remove elements at a specified position.
  - `clear()` - Remove all elements.
  - `resize()` - Change the size of the vector.
  - `reserve()` - Request a change in capacity.
  
- **Capacity:**
  - `size()` - Get the number of elements.
  - `capacity()` - Get the allocated storage capacity.
  - `empty()` - Check if the vector is empty.

### **Example:**
```cpp
std::vector<int> vec = {1, 2, 3};
vec.push_back(4);
vec.pop_back();
int value = vec[0];
vec.clear();
```

## **2. List (`std::list`)**

### **Common Operations:**
- **Access Elements:**
  - `front()` - Access the first element.
  - `back()` - Access the last element.
  
- **Modifiers:**
  - `push_front()` - Add an element at the beginning.
  - `push_back()` - Add an element at the end.
  - `pop_front()` - Remove the first element.
  - `pop_back()` - Remove the last element.
  - `insert()` - Insert elements at a specified position.
  - `erase()` - Remove elements at a specified position.
  - `clear()` - Remove all elements.

- **Capacity:**
  - `size()` - Get the number of elements.
  - `empty()` - Check if the list is empty.

### **Example:**
```cpp
std::list<int> lst = {1, 2, 3};
lst.push_front(0);
lst.push_back(4);
lst.pop_front();
lst.pop_back();
```

## **3. Deque (`std::deque`)**

### **Common Operations:**
- **Access Elements:**
  - `operator[]` - Access element by index.
  - `at()` - Access element with bounds checking.
  - `front()` - Access the first element.
  - `back()` - Access the last element.
  
- **Modifiers:**
  - `push_front()` - Add an element at the beginning.
  - `push_back()` - Add an element at the end.
  - `pop_front()` - Remove the first element.
  - `pop_back()` - Remove the last element.
  - `insert()` - Insert elements at a specified position.
  - `erase()` - Remove elements at a specified position.
  - `clear()` - Remove all elements.

- **Capacity:**
  - `size()` - Get the number of elements.
  - `empty()` - Check if the deque is empty.

### **Example:**
```cpp
std::deque<int> dq = {1, 2, 3};
dq.push_front(0);
dq.push_back(4);
dq.pop_front();
dq.pop_back();
```

## **4. Set (`std::set`)**

### **Common Operations:**
- **Modifiers:**
  - `insert()` - Add an element.
  - `erase()` - Remove an element.
  - `clear()` - Remove all elements.

- **Capacity:**
  - `size()` - Get the number of elements.
  - `empty()` - Check if the set is empty.

- **Lookup:**
  - `find()` - Find an element.
  - `count()` - Count the occurrences of an element.

### **Example:**
```cpp
std::set<int> s = {1, 2, 3};
s.insert(4);
s.erase(2);
bool found = s.find(3) != s.end();
s.clear();
```

## **5. Map (`std::map`)**

### **Common Operations:**
- **Access Elements:**
  - `operator[]` - Access or insert element by key.
  - `at()` - Access element with bounds checking.
  
- **Modifiers:**
  - `insert()` - Add a key-value pair.
  - `erase()` - Remove a key-value pair.
  - `clear()` - Remove all key-value pairs.

- **Capacity:**
  - `size()` - Get the number of key-value pairs.
  - `empty()` - Check if the map is empty.

- **Lookup:**
  - `find()` - Find a key-value pair.
  - `count()` - Count the occurrences of a key.

### **Example:**
```cpp
std::map<int, std::string> m;
m[1] = "one";
m.insert({2, "two"});
m.erase(1);
bool found = m.find(2) != m.end();
m.clear();
```

## **6. Unordered Set (`std::unordered_set`)**

### **Common Operations:**
- **Modifiers:**
  - `insert()` - Add an element.
  - `erase()` - Remove an element.
  - `clear()` - Remove all elements.

- **Capacity:**
  - `size()` - Get the number of elements.
  - `empty()` - Check if the set is empty.

- **Lookup:**
  - `find()` - Find an element.
  - `count()` - Count the occurrences of an element.

### **Example:**
```cpp
std::unordered_set<int> us = {1, 2, 3};
us.insert(4);
us.erase(2);
bool found = us.find(3) != us.end();
us.clear();
```

## **7. Unordered Map (`std::unordered_map`)**

### **Common Operations:**
- **Access Elements:**
  - `operator[]` - Access or insert element by key.
  - `at()` - Access element with bounds checking.
  
- **Modifiers:**
  - `insert()` - Add a key-value pair.
  - `erase()` - Remove a key-value pair.
  - `clear()` - Remove all key-value pairs.

- **Capacity:**
  - `size()` - Get the number of key-value pairs.
  - `empty()` - Check if the map is empty.

- **Lookup:**
  - `find()` - Find a key-value pair.
  - `count()` - Count the occurrences of a key.

### **Example:**
```cpp
std::unordered_map<int, std::string> um;
um[1] = "one";
um.insert({2, "two"});
um.erase(1);
bool found = um.find(2) != um.end();
um.clear();
```

## **Summary**

The STL provides a wide range of containers, each suited for different tasks and operations. By understanding the operations available for each container, you can choose the right one for your specific needs, ensuring efficient and effective data management